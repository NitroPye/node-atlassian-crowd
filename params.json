{"tagline":"A node.js module for communicating with Atlassian Crowd","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"node-atlassian-crowd","google":"","body":"# Atlassian Crowd Library for node.js #\r\nA node.js module for interacting with the Atlassian Crowd asynchronously.\r\n\r\n## Getting Started ##\r\nIn order to use this module you will first need to configure an application in Atlassian Crowd and Configure the Remote IP Address.\r\n\r\nSee the [Atlassian Crowd Documentation (Adding and Application)](https://confluence.atlassian.com/display/CROWD/Adding+an+Application#AddinganApplication-add) for assistance.\r\n\r\n## Usage ##\r\n<pre>\r\nvar AtlassianCrowd = require('atlassian-crowd');\r\nvar options = {\r\n  \"crowd\": {\r\n    \"base\": \"http://localhost\", \r\n    \"port\": 8080\r\n  },\r\n  \"application\": {\r\n    \"name\": \"my application\",\r\n    \"password\": \"pass123\"\r\n  }\r\n}\r\n\r\nvar crowd = new AtlassianCrowd(options);\r\n</pre>\r\n\r\n### Options ###\r\nIf you do not know these please ask your systems administrator.\r\n\r\n#### Required Settings ####\r\n`application.name` Application name as configured in Atlassian Crowd\r\n`application.password` Application name as configured in Atlassian Crowd\r\n`crowd.baseurl` Atlassian Crowd Base URL (Example http://crowd.localhost.com or http://localhost/context/)\r\n\r\n#### Optional Settings ####\r\n`crowd.port` If you have Crowd running on a port other than 80 or 443 specify the port number here\r\n\r\n## API ##\r\n\r\n### User Functions ###\r\nFunctions for interacting with a user account.\r\n\r\n#### Find a User by Username ####\r\nuser.find(userrname, callback)\r\nCallback contains two possible values. The first is an error object if the operation was not successful and the second is an Object containing details about the user.\r\n\r\n<pre>\r\ncrowd.user.find('test', function(err, res) {\r\n  if(err) { \r\n    throw err;\r\n   }\r\n  else {\r\n    console.log(res);\r\n  }\r\n});\r\n</pre>\r\n\r\n#### Create a User ####\r\nuser.create(firstname, lastname, displayname, email, username, password, callback)  \r\nCallback contains one possible value which is an error object if the operation was not successful.\r\n\r\n<pre>\r\ncrowd.user.create('test', 'user', 'Test User', 'test@foo.bar', 'testuser', 'password', function(err) {\r\n  if(err) { \r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(\"Success\")\r\n  }\r\n});\r\n</pre>\r\n\r\n#### Delete a User ####\r\nuser.remove(username, callback)  \r\nCallback contains one possible value which is an error object if the operation was not successful.\r\n\r\n<pre>\r\ncrowd.user.remove('testuser', function(err) {\r\n  if(err) { \r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(\"Success\")\r\n  }\r\n});\r\n</pre>\r\n\r\n### Check if User is Active ###\r\nuser.active(username, callback)  \r\nCallback contains two possible values. The first is an error obiect if the operation was not successful and the second is a Boolean\r\n\r\n<pre>\r\ncrowd.user.active('user', function (err, res) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(res.toString());\r\n  }\r\n});\r\n</pre>\r\n\r\n### User Group Membership ###\r\nuser.groups(username, callback)  \r\nCallback contains two possible values. The first is an error obiect if the operation was not successful and the second is an Array of Group Names\r\n\r\n<pre>\r\ncrowd.user.groups(username, function (err, res) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(res);\r\n  }\r\n});\r\n</pre>\r\n\r\n#### Authentication ####\r\nuser.authenticate(username, password, callback)  \r\nCallback contains two possible values. The first is an error object if the operation was not successful and the second is an Object containing details about the user\r\n\r\n<pre>\r\ncrowd.user.authenticate('user', 'password', function(err, res) {\r\n  if(err) { \r\n    throw err;\r\n   }\r\n  else {\r\n    console.log(res);\r\n  }\r\n});\r\n</pre>\r\n\r\n### Group Functions ###\r\n\r\n### Find ###\r\ngroup.find(groupname, callback)  \r\nCallback contains two possible values. The first is an error object if the operation was not successful and the second is an Object containing details about the group\r\n\r\n<pre>\r\ncrowd.groups.find('crowd-administrators', function (err, res) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(res);\r\n  }\r\n});\r\n</pre>\r\n\r\n### Create ###\r\ngroup.create(name, description)\r\nCallback contains one possible value which is an error object if the operation was not successful.\r\n\r\n<pre>\r\ncrowd.groups.create(\"test-group\", \"Test Description\", function(err) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(\"Success\");\r\n  }\r\n});\r\n</pre>\r\n\r\n# TODO #\r\n* Finish Docs\r\n* Update User Profile\r\n"}